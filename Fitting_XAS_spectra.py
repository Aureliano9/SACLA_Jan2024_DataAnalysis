# -*- coding: utf-8 -*-
"""
Created on Tue Aug 23 16:06:00 2022

@author: nurekeye

Plotting and reorganizing XAS Spectra data from SACLA
csv files are generated by sorting code
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import csv
from collections import defaultdict
from scipy.optimize import curve_fit
import lmfit as lf

Directory ='C:/Users/nurekeye/Desktop/Projects/SACLA_05-2022/DataAnalysis/2023_03_21/'

def custom_arctan(x,x0,y0,amp,width_arctan):
    return y0 + amp*(0.5 + np.arctan((x-x0) / width_arctan) / np.pi)

def custom_lorentzian(x,xc,area_lor,width_lor):
    return (2*area_lor / np.pi) * (width_lor / (4*(x - xc)**2 + width_lor**2) )

# Runs1 = np.array([1145399]) #2.9 uJ, hor, 1375 pls

# Runs0 = np.array([1145424]) #5 uJ, ver, 1380 pls
# Runs1 = np.array([1145406,1145407,1145421]) #2.9 uJ, ver, 1380 pls
# Runs0 = np.array([1145430]) #5 uJ, hor, 1380 pls
# Runs1 = np.array([1145404,1145405,1145408,1145432]) #2.9 uJ, hor, 1380 pls

# Runs0 = np.array([1145427]) #5 uJ, ver, 1411 pls
# Runs1 = np.array([1145420]) #2.9 uJ, ver, 1411 pls
# Runs0 = np.array([1145366,1145367,1145390,1145395,1145403,1145417,1145418,1145431]) #5 uJ, hor, 1411 pls
# Runs1 = np.array([1145372,1145373,1145391,1145419]) #2.9 uJ, hor, 1411 pls

# Runs0 = np.array([1145423]) #5 uJ, ver, 1464 pls
# Runs1 = np.array([1145422]) #2.9 uJ, ver, 1464 pls

# Runs0 = np.array([1145392,1145394,1145398]) #5 uJ, hor, 4373 pls !!!RUN 398 IS HERE
# Runs1 = np.array([1145393,1145398]) #2.9 uJ, hor, 4373 pls !!!RUN 398 IS HERE

# Runs0 = np.array([1145425]) #5 uJ, ver, 61330-61336 pls
# Runs1 = np.array([1145426]) #2.9 uJ, ver, 61330-61336 pls
# Runs0 = np.array([1145396,1145398,1145434]) #5 uJ, hor, 61330-61336 pls !!!RUN 398 IS HERE
# Runs1 = np.array([1145397,1145398,1145433]) #2.9 uJ, hor, 61330-61336 pls !!!RUN 398 IS HERE

# Runs1 = 1145389 #special run, see logbook

# Runs0 = np.array([1145366,1145367,1145390,1145392,1145394,1145395,1145396,
# 		      1145403,1145417,1145418,1145423,1145424,1145425,1145427,1145430,1145431,1145434]) #5 uJ runs
# Runs1 = np.array([1145372,1145373,1145391,1145393,1145397,1145399,1145404,
# 		      1145405,1145406,1145407,1145408,1145419,1145420,1145421,1145422,1145426,1145432,1145433]) #2.9 uJ runs

# Runs = np.concatenate([Runs0,Runs1])
Runs0 = [1145427]

# Create empty dictionaries to fill them with Pandas DataFrames, each key corresponds to a run
data = {} #5 uJ timing tool corrected
datah = {} #2.9 uJ timing tool corrected
datau = {} #5 uJ uncorrected
datauh = {} #2.9 uJ uncorrected
if 'Runs0' in locals():
    for i in Runs0:
        # i=1145442
        Runs = Runs0
        if i == 1145398:
            data[str(i)] = pd.read_csv(Directory+str(i)+'_0_61336.csv', delimiter=',').replace(' ',np.nan).astype(float)
            datau[str(i)] = pd.read_csv(Directory+str(i)+'_0_61336_raw.csv', delimiter=',').replace(' ',np.nan).astype(float)
        else:
            data[str(i)] = pd.read_csv(Directory+str(i)+'_0.csv', delimiter=',').replace(' ',np.nan).astype(float)
            datau[str(i)] = pd.read_csv(Directory+str(i)+'_0_raw.csv', delimiter=',').replace(' ',np.nan).astype(float)            
if 'Runs1' in locals():        
    for i in Runs1:
        # i=1145419
        Runs = Runs1
        if i == 1145398:
            data[str(i)] = pd.read_csv(Directory+str(i)+'_-2500_61336.csv', delimiter=',').replace(' ',np.nan).astype(float)
            datau[str(i)] = pd.read_csv(Directory+str(i)+'_-2500_61336_raw.csv', delimiter=',').replace(' ',np.nan).astype(float)
        else:
            data[str(i)] = pd.read_csv(Directory+str(i)+'_-2500.csv', delimiter=',').replace(' ',np.nan).astype(float)
            datau[str(i)] = pd.read_csv(Directory+str(i)+'_-2500_raw.csv', delimiter=',').replace(' ',np.nan).astype(float)

# data['1'] = pd.read_csv(r'C:\Users\nurekeye\Desktop\Projects\SACLA_05-2022\DataAnalysis\Fit_results\2023_07_19\Sheet2.dat',names=['Energy_on','TFY_on'])
# data['1'].Energy_on = data['1'].Energy_on - 5
# Runs = np.append(Runs,1)
# Runs = np.array([1])

fit_res = {}
fit_report = {}
fit_range_u = 13471

#%% Laser ON
# =============================================================================
# for k in Runs:
#     x_axis = data[str(k)].Energy_on[(~np.isnan(data[str(k)].TFY_on)) & (data[str(k)].Energy_on<fit_range_u) & (data[str(k)].TFY_on_std!=0)]
#     y_axis = data[str(k)].TFY_on[(~np.isnan(data[str(k)].TFY_on)) & (data[str(k)].Energy_on<fit_range_u) & (data[str(k)].TFY_on_std!=0)]
#     stddev = data[str(k)].TFY_on_std[(~np.isnan(data[str(k)].TFY_on)) & (data[str(k)].Energy_on<fit_range_u) & (data[str(k)].TFY_on_std!=0)]
#     
#     gmodel = lf.Model(custom_arctan) + lf.Model(custom_lorentzian)
#     params = lf.create_params( x0=dict(value=13472, vary=True, min=13470, max=13480), #Edge in eV
#                           y0=dict(value=min(y_axis), vary=True, min=-0.1, max=0.2), #Background level in a.u.
#                           amp=dict(value=0.22, vary=False, min=0.01, max=2), #Arctangent function amplitude in a.u.
#                           width_arctan=dict(value=2.5, vary=True, min=0.8, max=5), #Arctangent function width in ev
#                           xc=dict(value=13464, vary=True, min=13460, max=13480), #Lorentzian peak position in eV
#                           area_lor=dict(value=0.1, vary=True, min=0.01, max=10), #Lorentzain amplitude in a.u.
#                           width_lor=dict(value=3, vary=True, min=0.1, max=5)) #Lorentzian width in eV
#     
#     result = gmodel.fit(y_axis, params=params, x=x_axis, 
#                         weights = 1/stddev,
#                         method = 'nelder')
#     fit_res[str(k)] = result #save fit results in internal lmfit format
#     fit_report[str(k)] = result.fit_report() #save fit report
# 
#     figs, axes = plt.subplots(2,1, sharex=True, height_ratios=[5,1], num=k, figsize=[16,8], dpi=200)
#     figs.subplots_adjust(hspace=0)
#     axes[0].plot(x_axis, y_axis, '.', label='data')
#     axes[0].plot(x_axis, fit_res[str(k)].init_fit, '--', label='initial fit')
#     axes[0].plot(x_axis, fit_res[str(k)].best_fit, '-', label='best fit')
#     axes[0].legend(loc='lower right')
#     axes[0].set_ylabel('Intensity (a.u.)')
#     axes[0].text(2*min(x_axis)-max(x_axis), min(y_axis), s=fit_res[str(k)].fit_report(), fontsize=7)
#     axes[1].plot(x_axis, fit_res[str(k)].residual)
#     # axes[1].set_ylabel('Resid')
#     axes[1].set_xlim([2*min(x_axis)-max(x_axis), max(x_axis)])
#     axes[1].set_xlabel('Energy (eV)')
#     
#     mng = plt.get_current_fig_manager()
#     mng.window.showMaximized()
#     # plt.savefig(Save_Directory+EnergyXray+EnergyLaser+PolarisationLaser+'/'+str(k)+ EnergyLaser + '.png',dpi=300) #saving figures in .png file for 2.9 uJ
#     print(fit_res[str(k)].values)
# 
#     fig, axes = plt.subplots(1,1, num=k*2, dpi=200)
#     comps = fit_res[str(k)].eval_components(x=x_axis)
#     dely = fit_res[str(k)].eval_uncertainty(sigma=3)
#     axes.plot(x_axis, y_axis, '.', markersize=3, label='data')
#     axes.plot(x_axis, fit_res[str(k)].best_fit, '-', label='best fit')
#     axes.fill_between(x_axis, fit_res[str(k)].best_fit-dely, fit_res[str(k)].best_fit+dely,
#                             color="#C5C9C7", label=r'3-$\sigma$ band')
#     axes.set_title('data, best-fit, and uncertainty band')
#     axes.legend()
#     
#     x_axis2 = data[str(k)].Energy_on[(~np.isnan(data[str(k)].TFY_on)) &  (data[str(k)].TFY_on_std!=0)]
#     y_axis2 = data[str(k)].TFY_on[(~np.isnan(data[str(k)].TFY_on)) & (data[str(k)].TFY_on_std!=0)]
#     stddev2 = data[str(k)].TFY_on_std[(~np.isnan(data[str(k)].TFY_on)) & (data[str(k)].TFY_on_std!=0)]
#     x0 = fit_res[str(k)].values['x0']
#     y0 = fit_res[str(k)].values['y0']
#     amp = fit_res[str(k)].values['amp']
#     width_arctan = fit_res[str(k)].values['width_arctan']
#     xc = fit_res[str(k)].values['xc']
#     area_lor = fit_res[str(k)].values['area_lor']
#     width_lor = fit_res[str(k)].values['width_lor']
#     y_arctan = custom_arctan(x_axis2, x0, y0, amp, width_arctan)
#     y_lor = custom_lorentzian(x_axis2, xc, area_lor, width_lor)
#     y_fit = y_arctan+y_lor
#     y_resid = (y_arctan + y_lor - y_axis2) / stddev2
#     figs, axes = plt.subplots(2,1, sharex=True, height_ratios=[5,1], num=k*3, figsize=[16,8], dpi=200)
#     figs.subplots_adjust(hspace=0)
#     axes[0].plot(x_axis2, y_axis2, '.', label='data')
#     axes[0].plot(x_axis2, y_arctan + y_lor, '-', label='best fit')
#     axes[0].legend(loc='lower right')
#     axes[0].set_ylabel('Intensity (a.u.)')
#     axes[0].text(2*min(x_axis2)-max(x_axis2), min(y_axis2), s=fit_res[str(k)].fit_report(), fontsize=7)
#     axes[1].plot(x_axis2, y_resid)
#     # axes[1].set_ylabel('Resid')
#     axes[1].set_xlim([2*min(x_axis2)-max(x_axis2), max(x_axis2)])
#     axes[1].set_xlabel('Energy (eV)')
#     aaa=np.column_stack((x_axis2, y_axis2, stddev2, y_fit, y_resid))
# =============================================================================
#%% Laser OFF
for k in Runs:
    x_axis = data[str(k)].Energy_off[(~np.isnan(data[str(k)].TFY_off)) & (data[str(k)].Energy_off<fit_range_u) & (data[str(k)].TFY_off_std!=0)]
    y_axis = data[str(k)].TFY_off[(~np.isnan(data[str(k)].TFY_off)) & (data[str(k)].Energy_off<fit_range_u) & (data[str(k)].TFY_off_std!=0)]
    stddev = data[str(k)].TFY_off_std[(~np.isnan(data[str(k)].TFY_off)) & (data[str(k)].Energy_off<fit_range_u) & (data[str(k)].TFY_off_std!=0)]
    
    gmodel = lf.Model(custom_arctan)
    params = lf.create_params( x0=dict(value=13472, vary=True, min=13470, max=13475), #Edge in eV
                          y0=dict(value=min(y_axis), vary=True, min=-0.1, max=0.2), #Background level in a.u.
                          amp=dict(value=0.22, vary=False, min=0.01, max=0.2), #Arctangent function amplitude in a.u.
                          width_arctan=dict(value=1, vary=True, min=0.8, max=2)) #Arctangent function width in ev
    
    result = gmodel.fit(y_axis, params=params, x=x_axis, 
                        weights = 1/stddev,
                        method = 'nelder')
    fit_res[str(k)] = result #save fit results in internal lmfit format
    fit_report[str(k)] = result.fit_report() #save fit report

    figs, axes = plt.subplots(2,1, sharex=True, height_ratios=[5,1], num=k, figsize=[16,8], dpi=200)
    figs.subplots_adjust(hspace=0)
    axes[0].plot(x_axis, y_axis, '.', label='data')
    axes[0].plot(x_axis, fit_res[str(k)].init_fit, '--', label='initial fit')
    axes[0].plot(x_axis, fit_res[str(k)].best_fit, '-', label='best fit')
    axes[0].legend(loc='lower right')
    axes[0].set_ylabel('Intensity (a.u.)')
    axes[0].text(2*min(x_axis)-max(x_axis), min(y_axis), s=fit_res[str(k)].fit_report(), fontsize=7)
    axes[1].plot(x_axis, fit_res[str(k)].residual)
    # axes[1].set_ylabel('Resid')
    axes[1].set_xlim([2*min(x_axis)-max(x_axis), max(x_axis)])
    axes[1].set_xlabel('Energy (eV)')
    
    mng = plt.get_current_fig_manager()
    mng.window.showMaximized()
    # plt.savefig(Save_Directory+EnergyXray+EnergyLaser+PolarisationLaser+'/'+str(k)+ EnergyLaser + '.png',dpi=300) #saving figures in .png file for 2.9 uJ
    print(fit_res[str(k)].values)

    fig, axes = plt.subplots(1,1, num=k*2, dpi=200)
    comps = fit_res[str(k)].eval_components(x=x_axis)
    dely = fit_res[str(k)].eval_uncertainty(sigma=3)
    axes.plot(x_axis, y_axis, '.', markersize=3, label='data')
    axes.plot(x_axis, fit_res[str(k)].best_fit, '-', label='best fit')
    axes.fill_between(x_axis, fit_res[str(k)].best_fit-dely, fit_res[str(k)].best_fit+dely,
                            color="#C5C9C7", label=r'3-$\sigma$ band')
    axes.set_title('data, best-fit, and uncertainty band')
    axes.legend()
    
         
    x_axis2 = data[str(k)].Energy_off[(~np.isnan(data[str(k)].TFY_off)) &  (data[str(k)].TFY_off_std!=0)]
    y_axis2 = data[str(k)].TFY_off[(~np.isnan(data[str(k)].TFY_off)) & (data[str(k)].TFY_off_std!=0)]
    stddev2 = data[str(k)].TFY_off_std[(~np.isnan(data[str(k)].TFY_off)) & (data[str(k)].TFY_off_std!=0)]
    x0 = fit_res[str(k)].values['x0']
    y0 = fit_res[str(k)].values['y0']
    amp = fit_res[str(k)].values['amp']
    width_arctan = fit_res[str(k)].values['width_arctan']
    y_arctan = custom_arctan(x_axis2, x0, y0, amp, width_arctan)
    y_fit = y_arctan
    y_resid = (y_arctan - y_axis2) / stddev2
    fig, axes = plt.subplots(1,1, num=k*3, dpi=200)
    axes.plot(x_axis2, y_axis2, '.', label='data')
    axes.plot(x_axis2, y_arctan, '-', label='fit')

    
# =============================================================================
# 
# #Fitting boundaries
# x0l = 13470
# x0u = 13475
# y0l= 0
# y0u = 0.14
# gl = 1.2
# gu = 1.3
# fit_param = {}
# for k in Runs0:
#     popt, pcov = curve_fit(atan, data[str(k)].Energy_off[(~np.isnan(data[str(k)]).any(axis=1))&(data[str(k)].Energy_off<13474)] , 
#                            data[str(k)].TFY_off[(~np.isnan(data[str(k)]).any(axis=1))&(data[str(k)].Energy_off<13474)] , bounds=([x0l,y0l,gl],[x0u,y0u,gu]))    
#     fit_param[str(k)] = popt
# 
# plt.figure(1)
# plt.plot(data[str(k)].Energy_off, data[str(k)].TFY_off)
# plt.plot(data[str(k)].Energy_off, atan(data[str(k)].Energy_off, *popt))
# plt.figure(2)
# plt.plot(data[str(k)].Energy_on, data[str(k)].TFY_on)
# plt.plot(data[str(k)].Energy_on, atan(data[str(k)].Energy_on, *popt))
# 
# =============================================================================
