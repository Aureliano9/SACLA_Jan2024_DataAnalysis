# -*- coding: utf-8 -*-
"""
Created on Tue Aug 23 16:06:00 2022

@author: nurekeye

Plotting and reorganizing XAS Spectra data from SACLA
csv files are generated by sorting code
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os

# RunNumber = np.array([1359395, 1359396, 1359397, 1359398, 1359399, 1359400, 1359401, 1359402, 1359403, 1359404, 
#                       1359405, 1359406, 1359407, 1359408, 1359409, 1359410, 1359411, 1359412, 1359413, 1359414, 
#                       1359415, 1359416, 1359417, 1359419, 1359420, 1359421, 1359422, 1359424, 1359425, 1359426, 
#                       1359427, 1359428, 1359430, 1359431, 1359432, 1359433, 1359434, 1359435, 1359462, 1359463, 
#                       1359464, 1359465, 1359466, 1359467, 1359468, 1359469, 1359470, 1359471, 1359472, 1359473, 
#                       1359474, 1359475, 1359476, 1359477, 1359478, 1359479, 1359480, 1359481, 1359482, 1359483, 
#                       1359484, 1359485, 1359486]) #400 nm Spectra

RunNumber = np.array([1359495, 1359496, 1359497, 1359498, 1359499, 1359500, 1359501, 1359503, 1359504, 1359505, 
                      1359506, 1359507, 1359508, 1359509, 1359510, 1359511, 1359512, 1359513, 1359514, 1359516, 
                      1359517, 1359518, 1359519, 1359520, 1359521, 1359522, 1359523, 1359524, 1359525, 1359526,
                      1359545, 1359546, 1359547, 1359548, 1359549, 1359550, 1359551, 1359552, 1359553, 1359554, 
                      1359555, 1359556]) #200 nm Spectra

RunNumber = np.array([1359495])
Runs = RunNumber

Directory = 'C:/Users/nurekeye/Desktop/Projects/SACLA_01-2024/DataAnalysis/2024_06_07/Spectra_200nm/'# + str(int(RunNumber)) + '/'
Save_Directory = Directory


# Create empty dictionaries to fill them with Pandas DataFrames, each key corresponds to a run
data = {} #5 uJ timing tool corrected
datah = {} #2.9 uJ timing tool corrected
datau = {} #5 uJ uncorrected
datauh = {} #2.9 uJ uncorrected
for i in Runs:
    data[str(i)] = pd.read_csv(Directory+str(i)+'_0.csv', delimiter=',').replace(' ',np.nan).astype(float)
    datau[str(i)] = pd.read_csv(Directory+str(i)+'_0_raw.csv', delimiter=',').replace(' ',np.nan).astype(float)            

for k in Runs:
    os.mkdir(Directory+str(k)+'/')
    Save_Directory = Directory+str(k)+'/'
    #Detector vs Detector scatter plots, and histograms
    plt.figure(1, figsize=[10,10])
    plt.subplot(2,2,1)
    plt.plot( datau[str(k)].I1_on, datau[str(k)].I0_1_on,'.')
    plt.plot( datau[str(k)].I1_on, datau[str(k)].I0_2_on,'.')
    plt.plot( datau[str(k)].I0_1_on, datau[str(k)].I0_2_on,'.')
    plt.xlabel('Intensity (a.u.)')
    plt.ylabel('Intensity (a.u.)')
    plt.legend(['I1_on vs I0_1_on', 'I1_on vs I0_2_on', 'I0_1_on vs I0_2_on'])
    plt.title('Laser ON, Run='+str(k))
    plt.subplot(2,2,2)
    plt.hist(datau[str(k)].I1_on,bins=100,histtype='step')
    plt.hist(datau[str(k)].I0_1_on,bins=100,histtype='step')
    plt.hist(datau[str(k)].I0_2_on,bins=100,histtype='step')
    plt.xlabel('Intensity (a.u.)')
    plt.ylabel('Number of points')
    plt.legend(['I1_on', 'I0_1_on', 'I0_2_on'])
    plt.title('Laser ON, Run='+str(k))
    plt.subplot(2,2,3)
    plt.plot( datau[str(k)].I1_off, datau[str(k)].I0_1_off,'.')
    plt.plot( datau[str(k)].I1_off, datau[str(k)].I0_2_off,'.')
    plt.plot( datau[str(k)].I0_1_off, datau[str(k)].I0_2_off,'.')
    plt.xlabel('Intensity (a.u.)')
    plt.ylabel('Intensity (a.u.)')
    plt.legend(['I1_off vs I0_1_off', 'I1_off vs I0_2_off', 'I0_1_off vs I0_2_off'])
    plt.title('Laser OFF, Run='+str(k))
    plt.subplot(2,2,4)
    plt.hist(datau[str(k)].I1_off,bins=100,histtype='step')
    plt.hist(datau[str(k)].I0_1_off,bins=100,histtype='step')
    plt.hist(datau[str(k)].I0_2_off,bins=100,histtype='step')
    plt.xlabel('Intensity (a.u.)')
    plt.ylabel('Number of points')
    plt.legend(['I1_off', 'I0_1_off', 'I0_2_off'])
    plt.title('Laser OFF, Run='+str(k))
    plt.savefig(Save_Directory+str(k)+'_det_vs_det_non-binned.png',dpi=300)
    plt.close()
    
    #Separate detector statistic vs Energy, rebinned
    plt.figure(2, figsize=[15,15])
    plt.subplots_adjust(hspace=0.5, wspace=0.2)
    #Energy vs I1_on, I0_1_on and I0_1_on, rebinned
    plt.subplot(3,2,1)
    plt.plot( data[str(k)].Energy_on, data[str(k)].I1_on)
    plt.plot( data[str(k)].Energy_on, data[str(k)].I0_1_on)
    plt.plot( data[str(k)].Energy_on, data[str(k)].I0_2_on)
    plt.xlabel('Energy (eV)')
    plt.ylabel('Intensity (a.u.)')
    plt.legend(['I1_on', 'I0_1_on', 'I0_2_on'])
    plt.title('Separate detector signal, Laser ON, after rebinning')
    #Energy vs I1_off, I0_1_off and I0_1_off, rebinned
    plt.subplot(3,2,2)
    plt.plot( data[str(k)].Energy_off, data[str(k)].I1_off)
    plt.plot( data[str(k)].Energy_off, data[str(k)].I0_1_off)
    plt.plot( data[str(k)].Energy_off, data[str(k)].I0_2_off)
    plt.xlabel('Energy (eV)')
    plt.ylabel('Intensity (a.u.)')
    plt.legend(['I1_off', 'I0_1_off', 'I0_2_off'])
    plt.title('Separate detector signal, Laser OFF, after rebinning')    
    #Energy vs standard deviations of I1_on, I0_1_on and I0_1_on, rebinned
    plt.subplot(3,2,3)
    plt.plot( data[str(k)].Energy_on, data[str(k)].I1_on_std)
    plt.plot( data[str(k)].Energy_on, data[str(k)].I0_1_on_std)
    plt.plot( data[str(k)].Energy_on, data[str(k)].I0_2_on_std)
    plt.xlabel('Energy (eV)')
    plt.ylabel('Intensity (a.u.)')
    plt.legend(['I1_on', 'I0_1_on', 'I0_2_on'])
    plt.title('Separate detector standard deviation, Laser ON, after rebinning')
    #Energy vs standard deviations of I1_off, I0_1_off and I0_1_off, rebinned
    plt.subplot(3,2,4)
    plt.plot( data[str(k)].Energy_off, data[str(k)].I1_off_std)
    plt.plot( data[str(k)].Energy_off, data[str(k)].I0_1_off_std)
    plt.plot( data[str(k)].Energy_off, data[str(k)].I0_2_off_std)
    plt.xlabel('Energy (eV)')
    plt.ylabel('Intensity (a.u.)')
    plt.legend(['I1_off', 'I0_1_off', 'I0_2_off'])
    plt.title('Separate detector standard deviation, Laser OFF, after rebinning')    
    #Energy vs I1_on, I0_1_on and I0_1_on with error bars, rebinned
    plt.subplot(3,2,5)
    plt.errorbar( data[str(k)].Energy_on, data[str(k)].I1_on, yerr=data[str(k)].I1_on_std, capsize=5)
    plt.errorbar( data[str(k)].Energy_on, data[str(k)].I0_1_on, yerr=data[str(k)].I0_1_on_std, capsize=5)
    plt.errorbar( data[str(k)].Energy_on, data[str(k)].I0_2_on, yerr=data[str(k)].I0_2_on_std, capsize=5)
    plt.xlabel('Energy (eV)')
    plt.ylabel('Intensity (a.u.)')
    plt.legend(['I1_on', 'I0_1_on', 'I0_2_on'])
    plt.title('Separate detector signal with error bars, Laser ON, after rebinning')    
    #Energy vs I1_off, I0_1_off and I0_1_off with error bars, rebinned
    plt.subplot(3,2,6)
    plt.errorbar( data[str(k)].Energy_off, data[str(k)].I1_off, yerr=data[str(k)].I1_off_std, capsize=5)
    plt.errorbar( data[str(k)].Energy_off, data[str(k)].I0_1_off, yerr=data[str(k)].I0_1_off_std, capsize=5)
    plt.errorbar( data[str(k)].Energy_off, data[str(k)].I0_2_off, yerr=data[str(k)].I0_2_off_std, capsize=5)
    plt.xlabel('Energy (eV)')
    plt.ylabel('Intensity (a.u.)')
    plt.legend(['I1_off', 'I0_1_off', 'I0_2_off'])
    plt.title('Separate detector signal with error bars, Laser OFF, after rebinning')      
    plt.savefig(Save_Directory+str(k)+'_det_vs_energy.png',dpi=300)
    plt.close()
    
    #Energy vs normalized I1_on with error bars, error propagation rules applied. First is standard deviation, second is standard error
    plt.figure(3, figsize=[15,5])
    plt.subplot(1,2,1)
    plt.errorbar( data[str(k)].Energy_on, data[str(k)].TFY_on, yerr=data[str(k)].TFY_on_std, capsize=5)
    plt.errorbar( data[str(k)].Energy_on, data[str(k)].TFY_on, yerr=data[str(k)].TFY_on_std/np.sqrt(data[str(k)].N_values_on), capsize=5)
    plt.xlabel('Energy (eV)')
    plt.ylabel('TFY (a.u.)')
    plt.legend(['Standard Deviation', 'Standard Error'])
    plt.title('Laser ON, Run='+str(k))
    plt.subplot(1,2,2)
    plt.errorbar( data[str(k)].Energy_off, data[str(k)].TFY_off, yerr=data[str(k)].TFY_off_std, capsize=5)
    plt.errorbar( data[str(k)].Energy_off, data[str(k)].TFY_off, yerr=data[str(k)].TFY_off_std/np.sqrt(data[str(k)].N_values_off), capsize=5)
    plt.xlabel('Energy (eV)')
    plt.ylabel('TFY (a.u.)')
    plt.legend(['Standard Deviation', 'Standard Error'])
    plt.title('Laser OFF, Run='+str(k))
    plt.savefig(Save_Directory+str(k)+'_spectra_rebinned.png',dpi=300)
    plt.close()
    
    #Separate detector statistic vs energy
    plt.figure(4, figsize=[16,12])
    plt.subplot(2,3,1)
    plt.scatter(datau[str(k)].Energy_on, datau[str(k)].I0_2_on,color='#1f77b4',marker='.')
    plt.title('I0_2_ON')
    plt.ylabel('Intensity (a.u.)')
    plt.xlabel('Energy (eV)')
    plt.subplot(2,3,2)
    plt.scatter(datau[str(k)].Energy_on, datau[str(k)].I0_1_on,color='#ff7f0e',marker='.')
    plt.title('I0_1_ON')
    plt.ylabel('Intensity (a.u.)')
    plt.xlabel('Energy (eV)')
    plt.subplot(2,3,3)
    plt.scatter(datau[str(k)].Energy_on, datau[str(k)].I1_on,color='#2ca02c',marker='.')
    plt.title('I1_ON')
    plt.ylabel('Intensity (a.u.)')
    plt.xlabel('Energy (eV)')
    plt.subplot(2,3,4)
    plt.scatter(datau[str(k)].Energy_off, datau[str(k)].I0_2_off,color='#1f77b4',marker='.')
    plt.title('I0_2_OFF')
    plt.ylabel('Intensity (a.u.)')
    plt.xlabel('Energy (eV)')
    plt.subplot(2,3,5)
    plt.scatter(datau[str(k)].Energy_off, datau[str(k)].I0_1_off,color='#ff7f0e',marker='.')
    plt.title('I0_1_OFF')
    plt.ylabel('Intensity (a.u.)')
    plt.xlabel('Energy (eV)')
    plt.subplot(2,3,6)
    plt.scatter(datau[str(k)].Energy_off, datau[str(k)].I1_off,color='#2ca02c',marker='.')
    plt.title('I1_OFF')
    plt.ylabel('Intensity (a.u.)')
    plt.xlabel('Energy (eV)')
    plt.savefig(Save_Directory+str(k)+'_scatter-of-each-detector_vs-energy.png',dpi=300)
    plt.close()
    
    plt.figure(5, figsize=[16,6])
    plt.subplot(1,2,1)
    plt.scatter(datau[str(k)].Energy_on, datau[str(k)].I1_on/(datau[str(k)].I0_1_on+datau[str(k)].I0_2_on),color='k',marker='.')
    plt.scatter(datau[str(k)].Energy_off, datau[str(k)].I1_off/(datau[str(k)].I0_1_off+datau[str(k)].I0_2_off),color='r',marker='.')
    plt.title('I1/(I0_1+I0_2)')
    plt.ylabel('Intensity (a.u.)')
    plt.xlabel('Energy (eV)')
    plt.legend(['Laser ON', 'Laser OFF'])
    plt.subplot(1,2,2)
    plt.errorbar(data[str(k)].Energy_on, data[str(k)].TFY_on, yerr=data[str(k)].TFY_on_std)
    plt.errorbar(data[str(k)].Energy_off, data[str(k)].TFY_off, yerr=data[str(k)].TFY_off_std)
    plt.title('Rebinned')
    plt.ylabel('Intensity (a.u.)')
    plt.xlabel('Energy (eV)')
    plt.legend(['Laser ON', 'Laser OFF'])
    plt.savefig(Save_Directory+str(k)+'_normalized-scatter.png',dpi=300)
    plt.close()
    
    #Correlation between signal and number of shots
    figs, axes = plt.subplots(3,1, num=k, sharex=True)
    axes[0].scatter(data[str(k)].Energy_on, (data[str(k)].TFY_on)/data[str(k)].TFY_on_std)
    axes[0].set_title('Mean/Standard Deviation')
    axes[1].scatter(data[str(k)].Energy_on, np.sqrt(data[str(k)].N_values_on), color='r')
    axes[1].set_title('sqrt(Shots)')
    axes[2].scatter(data[str(k)].Energy_on, ((data[str(k)].TFY_on)/data[str(k)].TFY_on_std) / np.sqrt(data[str(k)].N_values_on), color='g')
    axes[2].set_title('(Mean/Standard Deviation) / (sqrt(Shots))')
    plt.savefig(Save_Directory+str(k)+'_photon-stat.png',dpi=300)
    plt.close()

    #Difference spectrum with error bars
    plt.errorbar(data[str(k)].Energy_on, data[str(k)].TFY_on - min(data[str(k)].TFY_on), yerr=data[str(k)].TFY_on_std)
    plt.errorbar(data[str(k)].Energy_off, data[str(k)].TFY_off - min(data[str(k)].TFY_on), yerr=data[str(k)].TFY_off_std)
    plt.errorbar(data[str(k)].Energy_on, data[str(k)].TFY_on-data[str(k)].TFY_off, yerr=np.sqrt(data[str(k)].TFY_on_std**2+data[str(k)].TFY_off_std**2))
    plt.title('Difference Spectrum')
    plt.ylabel('Intensity (a.u.)')
    plt.xlabel('Energy (eV)')
    plt.legend(['Laser ON', 'Laser OFF', 'ON-OFF'])
    plt.savefig(Save_Directory+str(k)+'_difference-spectrum-with-error-bars.png',dpi=300)
    plt.close()
    
    #Difference spectrum without error bars
    plt.plot(data[str(k)].Energy_on, data[str(k)].TFY_on - min(data[str(k)].TFY_on))
    plt.plot(data[str(k)].Energy_off, data[str(k)].TFY_off - min(data[str(k)].TFY_on))
    plt.plot(data[str(k)].Energy_on, data[str(k)].TFY_on-data[str(k)].TFY_off)
    plt.title('Difference Spectrum')
    plt.ylabel('Intensity (a.u.)')
    plt.xlabel('Energy (eV)')
    plt.legend(['Laser ON', 'Laser OFF', 'ON-OFF'])
    plt.savefig(Save_Directory+str(k)+'_difference-spectrum.png',dpi=300)
    plt.close()
    